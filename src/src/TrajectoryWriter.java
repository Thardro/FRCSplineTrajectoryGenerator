package src;

public class TrajectoryWriter {
	
	static String dir = "/Users/ethan/git/Stronghold/src/org/usfirst/frc/team3042/robot/commands/";
	static FileIO fileIO = new FileIO(dir);

	public static void writeTrajectory(String trajectoryFile, WaypointSequence sequence, 
			Trajectory[] scaledTrajectory, double scale, double dt) {
		fileIO.openFile(trajectoryFile + ".java");
		fileIO.writeToFile("package org.usfirst.frc.team3042.robot.commands;\n");
		fileIO.writeToFile("public class " + trajectoryFile + " {\n");
		
		fileIO.writeToFile("\t/*\n"
				+ "\t * Generated by points");
		for(int i = 0; i < sequence.getSize(); i++) {
			double currentX = sequence.getWaypoint(i).getX();
			double currentY = sequence.getWaypoint(i).getY();
			double currentTheta = sequence.getWaypoint(i).getTheta();
			fileIO.writeToFile("\t * (" + currentX + ", " + currentY + ", " + currentTheta + ")");
		}
		fileIO.writeToFile("\t */\n");
		
		fileIO.writeToFile("\tpublic static double[][] getLeftTrajectory() {\n"
				+ "\t\treturn LeftPoints;\n"
				+ "\t}\n");
		fileIO.writeToFile("\tpublic static double[][] getRightTrajectory() {\n"
				+ "\t\treturn RightPoints;\n"
				+ "\t}\n");
		
		fileIO.writeToFile("\t// Position (rotations)	Velocity (RPM)	Duration (ms)");
		fileIO.writeToFile("\tpublic static double [][]LeftPoints = new double[][]{");
		for(int i = 0; i < scaledTrajectory[0].getLength(); i++) {
			double currentPosition = scale * scaledTrajectory[0].getPoint(i).getPosition();
			double currentVelocity = scale * 60 * scaledTrajectory[0].getPoint(i).getVelocity();
			if(i == scaledTrajectory[0].getLength() - 1) {
				fileIO.writeToFile("\t\t{" + currentPosition + ",\t" + currentVelocity + ",\t" + dt + "}};");
			}
			else {
				fileIO.writeToFile("\t\t{" + currentPosition + ",\t" + currentVelocity + ",\t" + dt + "},");
			}
		}
		
		fileIO.writeToFile("\n\tpublic static double [][]RightPoints = new double[][]{");
		for(int i = 0; i < scaledTrajectory[1].getLength(); i++) {
			double currentPosition = scale * scaledTrajectory[1].getPoint(i).getPosition();
			double currentVelocity = scale * 60 * scaledTrajectory[1].getPoint(i).getVelocity();
			if(i == scaledTrajectory[1].getLength() - 1) {
				fileIO.writeToFile("\t\t{" + currentPosition + ",\t" + currentVelocity + ",\t" + dt + "}};");
			}
			else {
				fileIO.writeToFile("\t\t{" + currentPosition + ",\t" + currentVelocity + ",\t" + dt + "},");
			}
		}
		
		fileIO.writeToFile("\n}");
		fileIO.closeFile();
	}
	
}
